name: Go application CI/CD

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

env:
  GOLANGCI_LINT_VERSION: v1.51.1
  TAG_NAME: "${GITHUB_REF##*/}"

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin ${GOLANGCI_LINT_VERSION}

      - name: Lint code
        run: golangci-lint run

  test:
    name: Unit test code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test code
        run: go test ./...

  build-linux:
    name: Build Linux binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Linux binary
        run: make build-linux

      - name: Upload Linux binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v1
        with:
          name: logstash-exporter-linux
          path: out/main-linux

  build-darwin:
    name: Build Mac binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Mac binary
        run: make build-darwin

      - name: Upload Mac binary
        uses: actions/upload-artifact@v1
        with:
          name: logstash-exporter-darwin
          path: out/main-darwin

  build-windows:
    name: Build Windows binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Windows binary
        run: make build-windows

      - name: Upload Windows binary
        uses: actions/upload-artifact@v1
        with:
          name: logstash-exporter-windows
          path: out/main-windows

  build-linux-docker-image:
    name: Build Linux Docker image
    runs-on: ubuntu-20.04
    needs: [build-linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build Docker image
        run: make build-docker

      - name: Login to GitHub registry
        if: github.ref == 'refs/heads/master'
        run: echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u kuskoman --password-stdin

      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u kuskoman --password-stdin

      - name: Tag Docker image with master
        if: github.ref == 'refs/heads/master'
        run: docker tag logstash-exporter:latest ghcr.io/kuskoman/flashbot:master

      - name: Tag Docker image with tag
        if: startsWith(github.ref, 'refs/tags/')
        run: docker tag logstash-exporter:latest kuskoman/logstash-exporter:${{ env.TAG_NAME }}

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-20.04
    needs: [build-linux, build-darwin, build-windows, build-linux-docker-image]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

  upload-binaries:
    name: Upload ${{ matrix.os }} binary to GitHub release
    runs-on: ubuntu-20.04
    needs: [create-release, build-linux, build-darwin, build-windows]
    strategy:
      matrix:
        os: [linux, darwin, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download ${{ matrix.os }} binary
        uses: actions/download-artifact@v1
        with:
          name: logstash-exporter-${{ matrix.os }}

      - name: Upload ${{ matrix.os }} binary to GitHub release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./logstash-exporter-${{ matrix.os }}/main-${{ matrix.os }}
          asset_name: logstash-exporter-${{ matrix.os }}
          asset_content_type: application/octet-stream
