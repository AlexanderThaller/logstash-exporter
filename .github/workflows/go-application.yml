name: Go application CI/CD

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

env:
  GOLANGCI_LINT_VERSION: v1.51.1
  TAG_NAME: "${GITHUB_REF##*/}"

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin ${GOLANGCI_LINT_VERSION}

      - name: Lint code
        run: golangci-lint run

  test:
    name: Unit test code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test code
        run: go test ./...

  build-linux:
    name: Build Linux binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Linux binary
        run: make build-linux

      - name: Upload Linux binary
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v1
        with:
          name: linux-binary-${{ env.TAG_NAME }}.tar.gz
          path: out/main

  build-mac:
    name: Build Mac binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Mac binary
        run: make build-mac

      - name: Upload Mac binary
        uses: actions/upload-artifact@v1
        with:
          name: mac-binary-${{ env.TAG_NAME }}.tar.gz
          path: out/main

  build-windows:
    name: Build Windows binary
    runs-on: ubuntu-20.04
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Windows binary
        run: make build-windows

      - name: Upload Windows binary
        uses: actions/upload-artifact@v1
        with:
          name: windows-binary-${{ env.TAG_NAME }}.tar.gz
          path: out/main

  build-linux-docker-image:
    name: Build Linux Docker image
    runs-on: ubuntu-20.04
    needs: [build-linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build Docker image
        run: make build-docker

      - name: Login to GitHub registry
        if: github.ref == 'refs/heads/master'
        run: echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u kuskoman --password-stdin

      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u kuskoman --password-stdin

      - name: Tag Docker image with master
        if: github.ref == 'refs/heads/master'
        run: docker tag logstash-exporter:latest ghcr.io/kuskoman/flashbot:master

      - name: Tag Docker image with tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: docker tag logstash-exporter:latest kuskoman/logstash-exporter:${{ env.TAG_NAME }}
